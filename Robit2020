package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Joystick;



public class Robot extends TimedRobot {
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();
  private XboxController joystick = new XboxController(0); 
  private PWMTalonSRX winchMotor = new PWMTalonSRX(0);

  private DoubleSolenoid intakeHood = new DoubleSolenoid(0, 1);

  NetworkTable table;
  NetworkTableEntry tv;
  NetworkTableEntry tx;
  NetworkTableEntry ty;
  NetworkTableEntry ta;

  edu.wpi.first.wpilibj.controller.PIDController pidController; 

  //These two components are the motor and PID controller for the shooter
  PWMTalonSRX pwmTalonSRX;
  PIDSubsystem pidSubsystem;

  double Kp = 1f;//The value of these three constants will need to be determined later 
  double Kd = 1f;
  double Ki = 1f;
  double min_command = 0.05f;

  public enum armState
  {
    start,
    hangUp,
    downHang,
  }
  
  private armState state = armState.downHang;

  @Override
  public void robotInit() 
  {
    m_chooser.setDefaultOption("Default Auto", kDefaultAuto);
    m_chooser.addOption("My Auto", kCustomAuto);
    SmartDashboard.putData("Auto choices", m_chooser);

    pwmTalonSRX = new PWMTalonSRX(0);
    //pidSubsystem = getPIDController();
  
    table = NetworkTableInstance.getDefault().getTable("limelight");
    tv = table.getEntry("tv");
    tx = table.getEntry("tx");
    ty = table.getEntry("ty");
    ta = table.getEntry("ta");

    pidController = new PIDController(Kp, Ki, Kd);
  }

  /**
   * This function is called every robot packet, no matter the mode. Use
   * this for items like diagnostics that you want ran during disabled,
   * autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before
   * LiveWindow and SmartDashboard integrated updating.
   */

  @Override
  public void robotPeriodic() 
  {
    //read values periodically
    double hasTarget = tv.getDouble(0.0);
    double x = tx.getDouble(0.0);
    double y = ty.getDouble(0.0);
    double area = ta.getDouble(0.0);

    SmartDashboard.putNumber("HasTarget", hasTarget);

    //post to smart dashboard periodically
    SmartDashboard.putNumber("LimelightX", x);
    SmartDashboard.putNumber("LimelightY", y);
    SmartDashboard.putNumber("LimelightArea", area);
    //Detect firing button 
    //Set rpm on TalonSRX
    double temp = pidController.calculate(2.7, 3.0);

    //We need to know the motor number and the encoder type
    //We need to read the documentation on the pidcontroller

    if(joystick.getAButtonPressed() || state!= armState.hangUp)
    {
      extendhangers();

    }

  

    if (hasTarget == 1)
    {
      System.out.print(tx + ", " + ty);
    }else
    {
      System.out.print("No target");
    }


  }
  private void extendhangers()
  {
    //todo: release spring device

  }

  private void 

  public void SearchX(double x)
  {
    

      // if (joystick->GetRawButton(9))
      {
              double heading_error = -x;
              double steering_adjust = 0.0f;
              if (x > 1.0)
              {
                      steering_adjust = Kp*heading_error - min_command;
              }
              else if (x < 1.0)
              {
                      steering_adjust = Kp*heading_error + min_command;
              }
              //left_command += steering_adjust;
              //right_command -= steering_adjust;
      }
  }

  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the dashboard. The sendable
   * chooser code works with the Java SmartDashboard. If you prefer the
   * LabVIEW Dashboard, remove all of the chooser code and uncomment the
   * getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to
   * the switch structure below with additional strings. If using the
   * SendableChooser make sure to add them to the chooser code above as well.
   */

  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();

    m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    System.out.println("Auto selected: " + m_autoSelected);

    //drop intake arm
    intakeHood.set(Value.kForward);
  }


  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
      case kCustomAuto:
        // Put custom auto code here
        break;
      case kDefaultAuto:
      default:
        // Put default auto code here
        break;
    }
  }


  @Override
  public void teleopPeriodic() {
  }


  @Override
  public void testPeriodic() {
  }
}
